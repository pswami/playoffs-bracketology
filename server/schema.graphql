scalar JSON

type Query {
  groupsForUser(userId: ID!): [Group!]!
  group(id: ID!): Group
  picks(userId: ID!, groupId: ID!): [Pick!]!
  NBABracket: JSON!
  me: User
}

type Mutation {
  signup(email: String!, password: String!, username: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  addUserToGroup(groupId: ID!, userId: ID!): Group!
  deleteGroup(id: ID!): Group!
  upsertPick(groupId: ID, pickId: ID, data: PickInput!): Pick!
  deletePick(where: PickWhereUniqueInput!): Pick
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  username: String!
  groups: [Group!]!
}

input PickInput {
  team: String!
  wins: Int!
}
