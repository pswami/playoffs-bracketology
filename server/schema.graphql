# import GroupCreateInput from './generated/prisma-client/prisma.graphql'

scalar JSON

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsForUser(userId: ID!): [Group!]!
  group(id: ID!): Group
  picks(where: PickWhereInput): [Pick!]!
  NBABracket: JSON!
  currentUser: User
}

type Mutation {
  signup(email: String!, password: String!, username: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  joinGroup(groupId: ID!, userId: ID!): Group!
  leaveGroup(groupId: ID!, userId: ID!): Group!
  deleteGroup(id: ID!): Group!
  upsertPick(data: [PickInput!]!): [Pick]!
  deletePick(id: ID!): Pick
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String!
  groups: [Group]
  picks(where: PickWhereInput): [Pick!]!
}

input PickInput {
  id: ID
  round: Int
  seriesId: Int
  team: String!
  wins: Int!

  type: String!
  sport: String!
  year: Int!
}

type Pick {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  team: String!
  wins: Int!
  round: Int
  seriesId: Int

  type: String!
  sport: String!
  year: Int!
}

type Group {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  users: [User!]!
  name: String!
  private: Boolean!
  gamePoints: Int!
  teamPoints: Int!

  type: String!
  sport: String!
  year: Int!
}
